from math import inf, sqrtfrom heapq import heappop, heappushdef find_path (source_point, destination_point, mesh):    """    Searches for a path from source_point to destination_point through the mesh    Args:        source_point: starting point of the pathfinder        destination_point: the ultimate goal the pathfinder must reach        mesh: pathway constraints the path adheres to    Returns:        A path (list of points) from source_point to destination_point if exists        A list of boxes explored by the algorithm    """        path = []    boxes = {}    for box in mesh['boxes']:        if(source_point[1]>box[0] and source_point[1]<box[1] and source_point[0]>box[2] and source_point[0]<box[3]):            boxes[box]='source'               elif(destination_point[1]>box[0] and destination_point[0]<box[1] and destination_point[0]>box[2] and destination_point[0]<box[3]):            boxes[box]='destination'    print(source_point)    print(destination_point)    print(boxes)    return path, boxes.keys()